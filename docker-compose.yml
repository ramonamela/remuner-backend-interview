version: "3.7"

services:
  remuner-backend:
    build:
      context: .
      target: remuner-backend-dev
    image: remuner-backend-dev
    volumes:
      - type: bind
        source: .
        target: /remuner-backend
    env_file:
     - .env
    ports:
      - "8000:80"
    networks:
      - default-net
    depends_on:
      - postgres
      - redis
      - dynamodb

  make_migrations:
    image: remuner-backend-dev
    env_file:
      - .env
    volumes:
      - type: bind
        source: .
        target: /remuner-backend
    networks:
      - default-net
    depends_on:
      - postgres
    entrypoint: aerich migrate

  migrate:
    image: remuner-backend-dev
    env_file:
      - .env
    volumes:
      - type: bind
        source: .
        target: /remuner-backend
    networks:
      - default-net
    depends_on:
      - postgres
    entrypoint: aerich upgrade

  postgres:
    image: postgres:13.4-alpine3.14
    environment:
      - POSTGRES_DB=${PSQL_DB_DATABASE}
      - POSTGRES_USER=${PSQL_DB_USERNAME}
      - POSTGRES_PASSWORD=${PSQL_DB_PASSWORD}
    env_file:
     - .env
    volumes:
      - type: volume
        source: postgres-remuner-backend-data
        target: /var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${PSQL_DB_USERNAME}
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - default-net

  redis:
    image: redis:5.0.7
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    networks:
      - default-net

  dynamodb-s3-local:
    image: quay.io/minio/minio:RELEASE.2023-11-01T01-57-10Z
    command: minio server /data --console-address ":9090"
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    restart: always
    networks:
      - default-net

  dynamodb-s3:
    image: minio/mc
    depends_on:
      - dynamodb-s3-local
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://dynamodb-s3-local:9000 minio minio123;
      /usr/bin/mc mb myminio/backend-dynamodb-s3-bucket;
      /usr/bin/mc policy set public myminio/backend-dynamodb-s3-bucket;
      exit 0;
      "
    networks:
      - default-net

  dynamodb-local:
    image: amazon/dynamodb-local:latest
    ports:
      - "8001:8001"
    container_name: dynamodb-local
    networks:
      - default-net
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory", "-port", "8001"]

  dynamodb:
    depends_on:
      - dynamodb-local
      - dynamodb-s3
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID: dummyKeyId
      AWS_SECRET_ACCESS_KEY: dummyKey
    networks:
      - default-net
    entrypoint: >
      sh -c "aws dynamodb create-table \
          --table-name backend_dynamodb_table_local \
          --attribute-definitions \
              AttributeName=itemId,AttributeType=S \
              AttributeName=sortId,AttributeType=N \
          --key-schema \
              AttributeName=itemId,KeyType=HASH \
              AttributeName=sortId,KeyType=RANGE \
          --billing-mode PAY_PER_REQUEST
          --endpoint-url http://dynamodb-local:8001 --region dummy-region"

  format:
    build:
      context: .
      target: remuner-backend-dev
    image: remuner-backend-dev
    volumes:
      - type: bind
        source: .
        target: /remuner-backend
    entrypoint: ruff check --fix
    depends_on:
      - black

  black:
    image: remuner-backend-dev:latest
    volumes:
      - type: bind
        source: ./
        target: /remuner-backend
        read_only: true
    entrypoint: black --config .black --check --diff .

volumes:
  postgres-remuner-backend-data:

networks:
  default-net: